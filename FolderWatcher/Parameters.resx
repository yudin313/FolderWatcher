<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAGRkAAAEAIABQCgAAFgAAACgAAAAZAAAAMgAAAAEAIAAAAAAAxAkAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxNMwBcTTMBXE0zIFtMM2hcTTOxXE0z4FxNM/hcTTL/XE0y+FxM
        MuFbTDOyW00zaltNMiBcTDIBXEwyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW00yAFtM
        MwBcTTIWXE0zdVxNM9RcTTP7XE0z/1xNM/9cTTP/XE0z/1xNM/9cTTP/XE0z/1xNM/tcTTLVXE0ydlxN
        MhZbTDIAXE0zAAAAAAAAAAAAAAAAAAAAAAAAAAAAW00zAFxMMgBcTDI5XE0zwVxNM/1cTTP/XE0z/1xN
        M/9cTTP/XE0z/1xNM/9cTTP/XE0z/1xNM/9cTTP/XE0z/1xNM/1cTTLBXE0zOVtMMgBcTTMAAAAAAAAA
        AAAAAAAAXE0zAFtMMgBcTTNJXE0z3lxMMv9cTDL/XEwy/1xMMv9cTDL/W0wz/1tMM/9bTDP/W0wz/1tM
        M/9cTTL/XEwy/1xMMv9cTDL/XE0y/1xNM95cTTJJXE0zAFtMMgAAAAAAXE0yAFxNMwBcTTM5XE0z3VxM
        Mv9bTDP/W00z/1tNM/9bTTP/W0wy/1tMM/9bTTP/W00z/1tNM/9bTDP/W0wy/1tMM/9bTDP/W0wz/1tM
        Mv9cTTL/W00z3VtNMzlbTTMAW0wyAFxMMwBcTDMXXE0ywFxMMv9bTTP/W31//1ucsf9bm6//W5yx/1ty
        cP+AZi7/n30t/558Lf+ffS3/gGcu/1RPZf9OU5z/TlOb/05TnP9TUXP/W0wy/1xNMv9cTTPAXE0zF1xN
        MwBcTTMAXE0ydlxNM/5bTDL/XE0z/1+jtf9i1v//aNP6/2LW//9dkpv/pHwp/9yjKP/ZpDD/3KMo/6R9
        Kf9VV47/UmPo/1lo4/9TY+j/VVql/1tNM/9cTDL/XE0z/lxNMnZbTTMAXE0yIFxNM9NcTTP/W0wy/1xN
        M/9epLX/c8zq/5GmpP9u0fP/XZKb/6V8KP/XpTv/sphr/9elO/+mfSj/VVeP/2Bt3/+Nh57/Z3LX/1Va
        pv9bTTP/XEwy/1xNM/9cTTPUXE0zIVxMMmlcTTP6XE0z/1tMMv9cTTP/X6O0/2vS9v99wNP/Z9T5/12S
        mv+lfCj/2qQx/8mhTv/apDH/pX0p/1ZXjv9ZaOT/dHnF/11r4f9VWqX/W00z/1xMMv9cTTP/XE0z+ltN
        MmlbTTOxXE0z/1xNM/9bTDL/XE0z/1+js/9h1v//YdX9/2HW//9ekZr/pXwp/92jJv/boiX/3aMm/6V9
        Kf9WV47/UmPn/1Ji5v9SY+j/Vlul/1tNM/9cTDL/XE0z/1xNM/9cTDOyXE0y4FxNM/9cTTP/W0wy/1xN
        M/9fo7P/Ytb//2LU/P9i1f7/XpGa/6V8Kf/doyb/26In/92jJv+lfSn/VleO/1Jj5/9TY+X/UmPo/1Zb
        pf9bTTP/XEwy/1xNM/9cTTP/XE0z4VxMMvdcTTP/XE0z/1tMMv9cTTP/X6Oz/2HW//9g0/v/YdX+/16R
        mv+lfCn/3KIl/9qhJf/coiX/pX0p/1ZXjv9RYuf/UWHk/1Fi5/9WW6X/W00z/1xMMv9cTTP/XE0z/1xN
        M/hcTTP+XE0z/1xNM/9bTDL/W00z/2Gjs/9w2v//dNn8/27Z//9ekpr/pX0q/+CrOf/frD//4Ks5/6V+
        K/9XWI7/YG/p/2Z06P9icer/V1yl/1tMM/9cTDL/XE0z/1xNM/9cTTP+W00z+FxNM/9cTTP/W0wy/1tN
        M/9up7T/1/X//+z4/P/L8v//ZJOZ/6eCN//25cD/+fPk//blwP+ngzj/XV2O/8bL+P/q7Pr/09f6/2Zq
        p/9aTDP/XEwy/1xNM/9cTTP/XE0z+FxNM+FcTTP/XE0z/1tMMv9aTTP/cqi0/+r5/v//+/n/3PX+/2aT
        mf+ngzv/+e7Y//z9///57tj/qIU7/19fj//Y3Pn////5/+jq+/9qbaj/Wksz/1xMMv9cTTP/XE0z/1tN
        M+FbTTOyXE0z/1xNM/9bTDL/Wk0z/3KotP/p+f7//vv5/9v1/v9mk5n/p4M7//nu1//8/P3/+e7X/6iE
        O/9fX4//2Nv5///9+f/n6fv/am2o/1pLM/9cTDL/XE0z/1xNM/9cTTOyW00yalxNM/tcTTP/W0wy/1pN
        M/9yqLT/6fn+//77+f/b9f7/ZpOZ/6eDO//57tf//Pz9//nu1/+ohDv/X1+P/9jb+f///fn/5+n7/2pt
        qP9aSzP/XEwy/1xNM/9cTTP6XE0zaltMMiFbTDLUXE0z/1tMMv9aTTP/cqi0/+r5/v//+/n/3PX+/2aT
        mf+ngzv/+e/Z//z9///579n/qIU7/19fj//Z3Pn////5/+jq+/9qbaj/Wksz/1xMMv9cTTP/XE0y1FtN
        MiFcTTMAXE0ydlxNM/5bTDL/W00z/22otf/P9v//4vj//8Py//9klJv/qII2//bitf/679f/9uK1/6iE
        Nv9cXZD/vcT6/+Dj/P/K0Pz/ZWmp/1pMM/9cTDL/XE0z/lxNMnZbTTMAW00yAFtNMhdcTTPAXEwy/1tN
        M/9fgoL/aKe2/2qmtP9nprX/XXZy/4lqLf+wiTb/r4k5/7CJNv+Jay3/WFNr/15ip/9hZab/X2Oo/1lW
        ef9bTDP/XEwy/1tNM8BcTTMXXE0zAFtMMwBbTTIAW00zOltNM95cTDL/W00z/1tNM/9bTTP/W00z/1tM
        Mv9bTDL/XEwy/1xMMv9cTDL/W0wy/1tMMv9bTDP/W0wz/1tMM/9bTDP/XEwy/1xNM95bTTI6XE0yAFtM
        MwAAAAAAW0wyAFxNMwBbTTNJXE0z3lxMMv9bTDL/W0wy/1tMMv9cTDL/W0wz/1tMM/9bTDP/W0wz/1tM
        M/9cTDL/XEwy/1xMMv9cTDL/XEwy/1tNM95bTTNJXEwzAFtNMgAAAAAAAAAAAAAAAABcTTMAW0wyAFtM
        MzlbTTLBXE0z/VxNM/9cTTP/XE0z/1xNM/9cTTP/XE0z/1xNM/9cTTP/XE0z/1xNM/9cTTP/XE0z/VtN
        M8FbTTM5XEwyAFtNMwAAAAAAAAAAAAAAAAAAAAAAAAAAAFtNMgBcTDMAW00yFlxNM3ZcTTPVXE0z+1xN
        M/9cTTP/XE0z/1xNM/9cTTP/XE0z/1xNM/9cTTP7W00y1VxNMnZcTTIXXEwyAFtNMwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxNMwBcTTMBXE0yIFtNMmpcTTOyXE0z4VxNM/hcTTP/XE0z+FxN
        M+FcTTKzW0wyaltNMiBbTDIBW0wyAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AAfgPgAD4DwAAeA4AADgMAA
        AYCAAACAgAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgIAA
        AIDAAAGA4AADgPAAB4D4AA+A/AAfgA==
</value>
  </data>
</root>